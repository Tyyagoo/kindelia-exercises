// Basic Exercises involving Bools

type Bool {
  true
  false
}

// Is true
// Returns true if input is true
Bool.is_true(b: Bool): Bool
  b

// Is false
// Returns true if input is false
Bool.is_false(b: Bool): Bool
  Bool.neg(b)

// Negation
// Returns the opposite of a Bool
Bool.neg(b: Bool): Bool 
  case b {
    true: Bool.false
    false: Bool.true
  }

// And
// Returns true if both inputs are true
Bool.and(a: Bool, b: Bool): Bool
  case a {
    true: b
    false: Bool.false
  }

// Or
// Returs true if any input is true
Bool.or(a: Bool, b: Bool): Bool
  case a {
    true: Bool.true
    false: b
  }

// Equal
// Returs true if both inputs are identical
Bool.eql(a: Bool, b: Bool): Bool
  case a {
    true: Bool.and(a, b)
    false: Bool.nor(a, b)
  }

// Xor
// Returns true if both inputs are different
Bool.xor(a: Bool, b: Bool): Bool
  Bool.neg(Bool.eql(a, b))

// Nor
// Returns true if both inputs are false
Bool.nor(a: Bool, b: Bool): Bool
  Bool.neg(Bool.or(a, b))

// Nand
// Returns false only if both inputs are true
Bool.nand(a: Bool, b: Bool): Bool
  Bool.neg(Bool.and(a, b))

// Xnor
// Returns true if both inputs are identical
Bool.xnor(a: Bool, b: Bool): Bool
  Bool.eql(a, b)

Bool.test(msg: String, exp: Bool, rec: Bool): IO(Unit)
  let out = case Bool.eql(exp, rec) {
      true: String.concat(msg, ": Success")
      false: String.concat(msg, ": ERROR")
    }
  
  IO {
    IO.print(out)
  }

ex_00: IO(Unit)
  IO {

    Tests._00.is_true(Bool.is_true)
    Tests._00.is_false(Bool.is_false)
    Tests._00.neg(Bool.neg)
    Tests._00.and(Bool.and)
    Tests._00.or(Bool.or)
    Tests._00.eql(Bool.eql)
    Tests._00.xor(Bool.xor)
    Tests._00.nor(Bool.nor)
    Tests._00.nand(Bool.nand)
    Tests._00.xnor(Bool.xnor)

    IO.print("\n")

    IO.print("-- is_true --")
    Bool.test("wen true",  Bool.true,  Bool.is_true(Bool.true))
    Bool.test("wen false", Bool.false, Bool.is_true(Bool.false))
    IO.print("-------------\n")

    IO.print("-- is_false --")
    Bool.test("wen true",  Bool.false, Bool.is_false(Bool.true))
    Bool.test("wen false", Bool.true,  Bool.is_false(Bool.false))
    IO.print("-------------\n")

    IO.print("-- neg --")
    Bool.test("wen true",  Bool.false, Bool.neg(Bool.true))
    Bool.test("wen false", Bool.true,  Bool.neg(Bool.false))
    IO.print("-------------\n")

    IO.print("-- and --")
    Bool.test("wen false false", Bool.false, Bool.and(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.false, Bool.and(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.false, Bool.and(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.true,  Bool.and(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("-- or --")
    Bool.test("wen false false", Bool.false, Bool.or(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.true,  Bool.or(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.true,  Bool.or(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.true,  Bool.or(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("-- eql --")
    Bool.test("wen false false", Bool.true,  Bool.eql(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.false, Bool.eql(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.false, Bool.eql(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.true,  Bool.eql(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("-- xor --")
    Bool.test("wen false false", Bool.false, Bool.xor(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.true,  Bool.xor(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.true,  Bool.xor(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.false, Bool.xor(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("-- nor --")
    Bool.test("wen false false", Bool.true,  Bool.nor(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.false, Bool.nor(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.false, Bool.nor(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.false, Bool.nor(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("-- nand --")
    Bool.test("wen false false", Bool.true,  Bool.nand(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.true,  Bool.nand(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.true,  Bool.nand(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.false, Bool.nand(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("-- xnor --")
    Bool.test("wen false false", Bool.true,  Bool.xnor(Bool.false, Bool.false))
    Bool.test("wen false true",  Bool.false, Bool.xnor(Bool.false, Bool.true))
    Bool.test("wen true false",  Bool.false, Bool.xnor(Bool.true,  Bool.false))
    Bool.test("wen true true",   Bool.true,  Bool.xnor(Bool.true,  Bool.true))
    IO.print("-------------\n")

    IO.print("UwU")
  }
