// type PairBool
// Contains 2 Booleans inside it
type PairBool { 
  new(fst: Bool, snd: Bool)
}

// Returns the first element of a pair
PairBool.fst(pair: PairBool): Bool
  case pair {
    new: pair.fst
  }

// Returns the second element of a pair
PairBool.snd(pair: PairBool): Bool
  case pair {
    new: pair.snd
  }

// Returns true if both elements of a PairBool are identical
PairBool.eql_elements(a: PairBool): Bool 
  case a {
    new: Bool.eql(a.fst, a.snd)
  }
  
// Returns true if both Pairs are equal
PairBool.eql(a: PairBool, b: PairBool): Bool
  case a b {
    new new: Bool.and(Bool.eql(a.fst, b.fst), Bool.eql(a.snd, b.snd))
  }

// Returns true if both Pairs are different
PairBool.not_eql(a: PairBool, b: PairBool): Bool
  Bool.neg(PairBool.eql(a, b))

// Negates the values of a PairBool
PairBool.neg(pair: PairBool): PairBool
  case pair {
    new: PairBool.new(Bool.neg(pair.fst), Bool.neg(pair.snd))
  }

// Inverts the 2 elements of a PairBool
PairBool.swap(pair: PairBool): PairBool 
  case pair {
    new: PairBool.new(pair.snd, pair.fst)
  }

// Creates an PairBool from two Bool's
PairBool.create(a: Bool, b: Bool): PairBool
  PairBool.new(a, b)

PairBool.test(msg: String, exp: PairBool, rec: PairBool): IO(Unit)
  let out = case PairBool.eql(exp, rec) {
    true: String.concat(msg, ": Success")
    false: String.concat(msg, ": ERROR")
  }

  IO {
    IO.print(out)
  }

ex_02: IO(Unit)
  IO {

    Tests._02.fst(PairBool.fst)
    Tests._02.snd(PairBool.snd)
    Tests._02.eql_elements(PairBool.eql_elements)
    Tests._02.eql(PairBool.eql)
    Tests._02.not_eql(PairBool.not_eql)
    Tests._02.create(PairBool.create)
    Tests._02.neg(PairBool.neg)
    Tests._02.swap(PairBool.swap)

    IO.print("\n")

    IO.print("--- fst ---")
    Bool.test("wen (false false)", Bool.false, PairBool.fst(PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false true)",  Bool.false, PairBool.fst(PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true false)",  Bool.true,  PairBool.fst(PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true true)",   Bool.true,  PairBool.fst(PairBool.new(Bool.true,  Bool.true)))
    IO.print("-----------\n")

    IO.print("--- snd ---")
    Bool.test("wen (false false)", Bool.false, PairBool.snd(PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false true)",  Bool.true,  PairBool.snd(PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true false)",  Bool.false, PairBool.snd(PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true true)",   Bool.true,  PairBool.snd(PairBool.new(Bool.true,  Bool.true)))
    IO.print("-----------\n")

    IO.print("--- eql_elements ---")
    Bool.test("wen (false false)", Bool.true,  PairBool.eql_elements(PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false true)",  Bool.false, PairBool.eql_elements(PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true false)",  Bool.false, PairBool.eql_elements(PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true true)",   Bool.true,  PairBool.eql_elements(PairBool.new(Bool.true,  Bool.true)))
    IO.print("--------------------\n")

    IO.print("--- eql ---")
    Bool.test("wen (false false) (false false)", Bool.true,  PairBool.eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false false) (false true)",  Bool.false, PairBool.eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (false false) (true false)",  Bool.false, PairBool.eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (false false) (true true)",   Bool.false, PairBool.eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.true,  Bool.true)))

    Bool.test("wen (false true) (false false)",  Bool.false, PairBool.eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false true) (false true)",   Bool.true,  PairBool.eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (false true) (true false)",   Bool.false, PairBool.eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (false true) (true true)",    Bool.false, PairBool.eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.true,  Bool.true)))

    Bool.test("wen (true false) (false false)",  Bool.false, PairBool.eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (true false) (false true)",   Bool.false, PairBool.eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true false) (true false)",   Bool.true,  PairBool.eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true false) (true true)",    Bool.false, PairBool.eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.true,  Bool.true)))

    Bool.test("wen (true true) (false false)",   Bool.false, PairBool.eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (true true) (false true)",    Bool.false, PairBool.eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true true) (true false)",    Bool.false, PairBool.eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true true) (true true)",     Bool.true,  PairBool.eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.true,  Bool.true)))
    IO.print("-----------\n")

    IO.print("--- not_eql ---")
    Bool.test("wen (false false) (false false)", Bool.false, PairBool.not_eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false false) (false true)",  Bool.true,  PairBool.not_eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (false false) (true false)",  Bool.true,  PairBool.not_eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (false false) (true true)",   Bool.true,  PairBool.not_eql(PairBool.new(Bool.false, Bool.false), PairBool.new(Bool.true,  Bool.true)))

    Bool.test("wen (false true) (false false)", Bool.true,   PairBool.not_eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (false true) (false true)",  Bool.false,  PairBool.not_eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (false true) (true false)",  Bool.true,   PairBool.not_eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (false true) (true true)",   Bool.true,   PairBool.not_eql(PairBool.new(Bool.false, Bool.true),  PairBool.new(Bool.true,  Bool.true)))
 
    Bool.test("wen (true false) (false false)", Bool.true,   PairBool.not_eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (true false) (false true)",  Bool.true,   PairBool.not_eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true false) (true false)",  Bool.false,  PairBool.not_eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true false) (true true)",   Bool.true,   PairBool.not_eql(PairBool.new(Bool.true,  Bool.false), PairBool.new(Bool.true,  Bool.true)))

    Bool.test("wen (true true) (false false)", Bool.true,    PairBool.not_eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.false, Bool.false)))
    Bool.test("wen (true true) (false true)",  Bool.true,    PairBool.not_eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.false, Bool.true)))
    Bool.test("wen (true true) (true false)",  Bool.true,    PairBool.not_eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.true,  Bool.false)))
    Bool.test("wen (true true) (true true)",   Bool.false,   PairBool.not_eql(PairBool.new(Bool.true,  Bool.true),  PairBool.new(Bool.true,  Bool.true)))
    IO.print("---------------\n")

    IO.print("--- neg ---")
    PairBool.test("wen (false false)", PairBool.new(Bool.true, Bool.true),   PairBool.neg(PairBool.new(Bool.false, Bool.false)))
    PairBool.test("wen (false true)",  PairBool.new(Bool.true, Bool.false),  PairBool.neg(PairBool.new(Bool.false, Bool.true)))
    PairBool.test("wen (true false)",  PairBool.new(Bool.false, Bool.true),  PairBool.neg(PairBool.new(Bool.true,  Bool.false)))
    PairBool.test("wen (true true)",   PairBool.new(Bool.false, Bool.false), PairBool.neg(PairBool.new(Bool.true,  Bool.true)))
    IO.print("-----------\n")
  
    IO.print("--- swap ---")
    PairBool.test("wen (false false)", PairBool.new(Bool.false, Bool.false), PairBool.swap(PairBool.new(Bool.false, Bool.false)))
    PairBool.test("wen (false true)",  PairBool.new(Bool.true, Bool.false),  PairBool.swap(PairBool.new(Bool.false, Bool.true)))
    PairBool.test("wen (true false)",  PairBool.new(Bool.false, Bool.true),  PairBool.swap(PairBool.new(Bool.true,  Bool.false)))
    PairBool.test("wen (true true)",   PairBool.new(Bool.true, Bool.true),   PairBool.swap(PairBool.new(Bool.true,  Bool.true)))
    IO.print("------------\n")

    IO.print("UwU")
  }
